"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/**
 * Resolve dot notation strings
 *
 * @param  {Object} context     Object to start notation search (defaults to global scope)
 * @param  {String} [string=''] Dot notation representation
 * @return {Any}				Whatever it finds / undefined
 *
 * @example
 * const obj = {
 *   top_level: {
 *     nested: {
 *       value: 'My Value'
 *     }
 *   }
 * };
 *
 * notate(obj, 'top_level.nested.value');
 * // 'My Value'
 *
 * notate(obj, 'top_level.missing.value');
 * // undefined
 */
module.exports = function (source) {
  var string = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  return string.split('.').reduce(function (previous, current) {
    return _typeof(previous) === 'object' ? previous[current] : previous;
  }, source);
};
